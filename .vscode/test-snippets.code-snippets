{
	// Place your flutter_getx_testing workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// "Unit Test": {
	// 	"scope": "dart",
  //   "prefix": "utest",
  //   "body": [
	// 		"test('$1', () {",
	// 		"  $2",
	// 		"});"
	// 	],
  //   "description": "Better Unit Test Snippet"
  // }

	// "OrderListPage Controller Tests" :{
	// 	"body": [""]
	// }

	"OrderListPageController": {
		"prefix": "utorderlistcontroller",
		"body": [
			"group('OrderListPage Controller', () {",
			"    test('Initital list', () {",
			"      final controller = OrderListPageController();",
			"",
			"      //controller.orders.",
			"    });",
			"",
			"    test('Pagination', () {",
			"      final controller = OrderListPageController();",
			"",
			"      //controller.orders.",
			"    });",
			"",
			"    test('Create new Order', () {",
			"      final controller = OrderListPageController();",
			"",
			"      //controller.orders.",
			"    });",
			"  });"
		],
		"description": "group for tests"
	},
	"UT Dummy Orders Repository (orders stream only)": {
		"prefix": "utdummyordersrepo-orders-stream",
		"body": [
			"class DummyOrdersRepository extends GetxService implements IOrdersRepository {",
			"  final _orders = BehaviorSubject<List<Order>>();",
			"  @override",
			"  Stream<List<Order>> get orders$ => _orders;",
			"}"
		],
		"description": "Dummy Orders Repository"
	},
	"UT Dummy Orders Repository (loadMore method)": {
		"prefix": "utdummyordersrepo-loadmore",
		"body": [
			"@override",
			"Future loadMoreOrders() async {",
			"  final items = 20.generate((index) => randomOrder(id: index)).toList();",
			"  _orders.add(items);",
			"}",
		],
		"description": "Dummy Orders Repository Save method"
	},
	"UT Dummy Orders Repository (save method)": {
		"prefix": "utdummyordersrepo-save",
		"body": [
			"@override",
			"Future<ResultOf<Order>> save(Order order) async {",
			"  final copyOrders = _orders.value.toList();",
			"  final copyOrder =",
			"      order.copyWith(id: math.Random().nextInt(1000).toString());",
			"  copyOrders.add(copyOrder);",
			"  _orders.add(copyOrders);",
			"  return ResultOf.success(copyOrder);",
			"}",
		],
		"description": "Dummy Orders Repository Save method"
	},
	"utfirebaseordersrepo-loadmore": {
		"prefix": "utfirebaseordersrepo-loadmore",
		"body": [
			"@override",
			"  Future loadMoreOrders() async {",
			"    try {",
			"      var q = _firestore",
			"          .collection('orders')",
			"          .orderBy('date', descending: true)",
			"          .limit(_perPage);",
			"",
			"      if (_docs.hasValue && _docs.value.isNotEmpty) {",
			"        q = q.startAfterDocument(_docs.value.last);",
			"      }",
			"",
			"      final snapshots = await q.get();",
			"",
			"      final newList =",
			"          _docs.hasValue ? _docs.value.toList() : <QueryDocumentSnapshot>[];",
			"      newList.addAll(snapshots.docs);",
			"      _docs.add(newList);",
			"      // log('Order count: ${_docs.value.length}');",
			"      log('Order count: ${newList.length}');",
			"    } catch (e) {",
			"      log(e.toString());",
			"    }",
			"  }",
		],
		"description": "Firebase Orders Repo' `loadMoreOrders()` method"
	},
	"utfirebaseordersrepo-save": {
		"prefix": "utfirebaseordersrepo-save",
		"body": [
			"  @override",
			"  Future<ResultOf<Order>> save(Order order) async {",
			"    // TODO: save in Firebase",
			"    return ResultOf.success(order);",
			"  }"
		],
		"description": "Firebase Orders Repo' `save()` method"
	}
}
